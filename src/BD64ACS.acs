#library "BD64ACS"
#include "zcommon.acs"
#include "ACSFunc.acs"
#include "BD64FlashlightACS.acs"
#include "BD64ScreenFXACS.acs"

script "BD64Respawn" Respawn NET
{
	//Hud to Doom Style
	If(!getusercvar(PlayerNumber(),"HUDSwitchCvar"))
	{
		TakeInventory("HUDSwitch",1);
	}
	else
	{
		GiveInventory("HUDSwitch",1);
	}

	//Reloading Mode
	if(!getcvar("NoReloadCvar"))
	{
		TakeInventory("NoReloading",1);
	}
	else
	{
		GiveInventory("NoReloading",1);
	}

	//Classic Weapons mode for Classical Mode
	SetInventory("VWeaponMode",getCvar("VWeaponCvar"));

	//Alternative Skins
	SetInventory("AltRifleSkin",getuserCvar(PlayerNumber(),"AlternativeRifleSkinCvar"));
	SetInventory("AltLaserSkin",getuserCvar(PlayerNumber(),"AlternativeLaserSkinCvar"));

	//Classic Weapons Mode for Tactical and Modern Classes
	SetInventory("ClassicRLToken",getcvar("ClassicRLCvar"));
	SetInventory("ClassicChaingunToken",getcvar("ClassicChaingunCvar"));
	SetInventory("ClassicChainsawToken",getcvar("VanillaChainsawCvar"));

	Delay(1);
}

Script "BD64Initilize" Enter
{
	ACS_NamedExecuteAlways("BD64Respawn",0);
	CreateTranslation(2666,0:255=%[0,0,0]:[0.94,0.97,1.00]);//ALICE BLUE

	if(GetPlayerInfo(PlayerNumber(),PLAYERINFO_PLAYERCLASS) == 1 & 2)
	{

	}
	else
	{
		TakeInventory("Stamina",100);
	}

	if(GetCvar("WeaponsWarmUpCvar") == 0) //First Select Animation
	{
		TakeInventory("StartWeapon",1);
		TakeInventory("NeverSelectedPistol",1);
		TakeInventory("NeverSelectedRifle",1);
		TakeInventory("NeverSelectedShotgun",1);
		TakeInventory("NeverSelectedSSG",1);
		TakeInventory("NeverSelectedSMG",1);
		TakeInventory("NeverSelectedRL",1);
		TakeInventory("NeverSelectedPlasma",1);
		TakeInventory("NeverSelectedGauss",1);
	}

	//Survival Mode
	if(GameSkill() == 6)
	if(PlayerClass(PlayerNumber()) == 0)
		GiveInventory("64PortableFirstAidKit",1);
	else
	GiveInventory("64PortableFirstAidKitTACTICAL",1);
	else if(GameSkill() == 7)
	if(PlayerClass(PlayerNumber()) == 0)
		GiveInventory("64PortableFirstAidKit",1);
	else
	GiveInventory("64PortableFirstAidKitTACTICAL",1);

	//Map Checker
	SetInventory("VmapCheck",GetCvar("VMapCheckCvar")); //Vanilla Final Outpost and The Absolution
	SetInventory("TCMapCheck",GetCvar("TCMapCheckCvar"));
}

script "IceDeathTranslate" (VOID) NET
{
Thing_SetTranslation(0,2666);
Delay(1);
}

Script "PlayerDeathScript" Death
{
	Delay(1);
	TakeInventory("ClassicChainsawToken",1);
	TakeInventory("ClassicRLToken",1);
}

script "KickKeyPress" (VOID) NET
{
	if(CheckInventory("IsModern") > 0)
		{
		GiveInventory("Kicking",1);
		terminate;
		}
	else
	{
	if(CheckInventory("stamina") == 100)
		{
		terminate;
		}
	else
		{
	if(CheckInventory("Stamina") > 80)
			{
			Print(s:"Not Enough Stamina!");
			PlaySound(0,"Tired",2,1.0,FALSE,ATTN_NORM);
			terminate;
			}
	else
			{
			GiveInventory("Kicking",1);
			}
		}
	}
}

Script "TossingMine" (VOID) NET
{
GiveInventory("TossMine",1);
}

Script "PlacingMine" (VOID) NET
{
GiveInventory("PlaceMine",1);
}

Script "WeaponSpecialAction" (VOID) NET
{
GiveInventory("WeaponSpecialAction",1);
}

script "CheckCrouch" ENTER
{
	int buttons2;
	while (TRUE)
	{
		buttons2 = GetPlayerInput(-1,INPUT_BUTTONS);

		if ((buttons2 & BT_CROUCH)||(GetActorViewHeight(0) <= PLAYER_VIEWHEIGHT / 2 << 16))
		{
			GiveInventory("IsCrouching",1);
			delay(1);
			restart;
		}
		TakeInventory("IsCrouching",1);
		delay(4);
	}
}

Script "DM_SpawnACS" (VOID)
{
if	(GameType() == GAME_NET_DEATHMATCH)
	GiveInventory("IsDM",1);
}

script "SetBloodAmountACS" (void)
{
	if(GetCvar("isrunningzandronum") != 0)
	{
		switch(GetCvar("bd_bloodamount"))
		{
			Case 0: SetActorState(0,"LowBlood"); break;
			Case 1: SetActorState(0,"LowBlood"); break;
			Case 2: break;
			Case 3: SetActorState(0,"LotsOfBlood"); break;
			Case 4: SetActorState(0,"AbsurdBlood"); break;
			Default: //at least 5
			SetActorState(0,"AbsurdBlood");
			GiveInventory("AnimuGore",1);
			break;
		}
	}
	else
	{
		switch(GetCvar("zdoombrutalblood"))
		{
			Case 0: SetActorState(0,"LowBlood"); break;
			Case 1: SetActorState(0,"LowBlood"); break;
			Case 2: break;
			Case 3: SetActorState(0,"LotsOfBlood"); break;
			Case 4: SetActorState(0,"AbsurdBlood"); break;
			Default: //at least 5
			SetActorState(0,"AbsurdBlood");
			GiveInventory("AnimuGore",1);
			break;
		}
	}
}

Script "LowBloodCheckerACS" (VOID)
{
if	(GameType () == GAME_NET_DEATHMATCH || GetCvar("bd_lowgraphicsmode") != 0 | GetCvar("zdoombrutaljanitor") != 0 )
{ GiveInventory("LowGraphicsMode",1); }
}

script "Zandro_Check" OPEN
{
if (GetCvar("isrunningzandronum") == 1)
	{
	ConsoleCommand("compat_clientssendfullbuttoninfo 1");
	}
}

script "QZanTacticalCheck" Enter
{
Delay(3);
if (GetCvar("IsRunningQZan") == 1)
	{
	if(CheckInventory("IsTacticalClass") == 1)
		{
		ConsoleCommand("cl_run FALSE");
		}
	}
}

script "Sprinting" ENTER
{
if(CheckInventory("IsTacticalClass") == 1)
	{
	int buttons;

	while (TRUE)
		{
		buttons = GetPlayerInput(-1,INPUT_BUTTONS);

		if ((buttons & BT_SPEED) && (buttons & BT_FORWARD) && !(buttons & BT_CROUCH))
			{
			GiveInventory("IsRunning",1);
			delay(1);
			}
		delay(1);
		TakeInventory("IsRunning",1);
		}
	}
	else
	terminate;
}

script "StaminaRecovery" (VOID)
{
SetActorProperty(0,APROP_Speed,0.9);
if(CheckInventory("PowerStrength") > 0)
	{
	TakeInventory("Stamina",2);
	}
else
TakeInventory("Stamina",1);
}

script "TacticalPlayerFasterACS" (void)
{
SetActorProperty(0,APROP_Speed,2.0);
delay (1);
}

//Weapon Spawner
script "ChaingunSpawner" (void)
{
	static str WeaponType[] =
	{
		"SpawnChaingun","SpawnRifle","SpawnSMG"
	};
	SetActorState(0,WeaponType[GetCvar("Chaingun_Spawner_Cvar") - 1]);
	Delay(1);
}

script "PlasmaRifleSpawner" (void)
{
	static str WeaponType[] =
	{
		"SpawnPlasmaRifle","SpawnGaussCannon"
	};
	SetActorState(0,WeaponType[GetCvar("GaussCannon_Spawner_Cvar") - 1]);
	Delay(1);
}

script "BFGSpawner" (void)
{
	static str WeaponType[] =
	{
		"SpawnBFG9000","SpawnUnmaker","SpawnLasergun"
	};
	SetActorState(0,WeaponType[GetCvar("BFG_Spawner_Cvar") - 1]);
	Delay(1);
}

script "WpnPowerRandom" (void)
{
	Switch(GetCvar("WpnPower_Spawner_Cvar"))
	{
		Case 1: SetActorState(0,"SpawnBlurSphere"); SetActorState(0,"SpawnBerserk"); SetActorState(0,"SpawnSoulSphere"); SetActorState(0,"SpawnMegaSphere"); SetActorState(0,"SpawnInvulnerabilitySphere"); break;
		Case 2: SetActorState(0,"SpawnDemonKey"); break;
	}
	Delay(1);
}

//Monster Spawner

script "ZombiemanSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentZombieman");

	SetResultValue(PercentValue);
}

script "ZombiemanSpawner" (void)
{
	static str MonsterType[] =
	{
		"SpawnZombieMan","SpawnZombieMarine"
	};
	SetActorState(0,MonsterType[GetCvar("ZMarineRandom_Cvar") - 1]);
	Delay(1);
}

script "ShotgunGuySpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentShotgunGuy");

	SetResultValue(PercentValue);
}

script "ShotgunGuySpawner" (void)
{
	static str MonsterType[] =
	{
		"SpawnShotgunGuy","SpawnSSGGuy","SpawnBFGGuy"
	};
	
	Switch(GetCvar("SSGZombieRandom_Cvar"))
	{
//		Case -3: SetActorState(0,"AltSpawn3"); break;
		Case -2: SetActorState(0,"AltSpawn2"); break;
		Case -1: SetActorState(0,"AltSpawn1"); break;
	}
	SetActorState(0,MonsterType[GetCvar("SSGZombieRandom_Cvar") - 1]);
	Delay(1);
}

script "ChaingunGuySpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentChaingunGuy");

	SetResultValue(PercentValue);
}

script "ChaingunGuySpawner" (void)
{
	static str MonsterType[] =
	{
		"SpawnChaingunGuy","SpawnPlasmaGuy"
	};
	
	If(GetCvar("ZombieChaingunRandom_Cvar") == -1) {SetActorState(0,"D64MonsterOnly");}
	SetActorState(0,MonsterType[GetCvar("ZombieChaingunRandom_Cvar") - 1]);
	Delay(1);
}

script "ImpSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentImp");

	SetResultValue(PercentValue);
}

script "ImpSpawner" (void)
{
	static str MonsterType[] =
	{
		"SpawnImp","SpawnNightImp","SpawnHarvester"
	};

	Switch(GetCvar("NImp_Spawner_Cvar"))
	{
//		Case -3: SetActorState(0,"AltSpawn3"); break;
		Case -2: SetActorState(0,"AltSpawn2"); break;
		Case -1: SetActorState(0,"AltSpawn1"); break;
	}
	SetActorState(0,MonsterType[GetCvar("NImp_Spawner_Cvar") - 1]);
	Delay(1);
}

script "DemonSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentDemon");

	SetResultValue(PercentValue);
}

script "DemonSpawner" (void)
{
	static str MonsterType[] =
	{
		"SpawnDemon","SpawnAcidDemon","SpawnButcher"
	};
	
	Switch(GetCvar("NSpectre_Spawner_Cvar"))
	{
//		Case -3: SetActorState(0,"AltSpawn3"); break;
		Case -2: SetActorState(0,"AltSpawn2"); break;
		Case -1: SetActorState(0,"AltSpawn1"); break;
	}
	SetActorState(0,MonsterType[GetCvar("AcidDemonRandom_Cvar") - 1]);
	Delay(1);
}

script "SpectreSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentSpectre");

	SetResultValue(PercentValue);
}

script "SpectreSpawner" (void)
{
	static str MonsterType[] =
	{
		"SpawnSpectre","SpawnNightSpectre","SpawnWraith"
	};
	
	Switch(GetCvar("NSpectre_Spawner_Cvar"))
	{
//		Case -3: SetActorState(0,"AltSpawn3"); break;
		Case -2: SetActorState(0,"AltSpawn2"); break;
		Case -1: SetActorState(0,"AltSpawn1"); break;
	}
	SetActorState(0,MonsterType[GetCvar("NSpectre_Spawner_Cvar") - 1]);
	Delay(1);
}

script "CacodemonSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentCacodemon");

	SetResultValue(PercentValue);
}

script "CacodemonSpawner" (void)
{
	static str CacoSpawnType[] =
	{
		"SpawnCacodemon","SpawnNightCacodemon","SpawnFallen"
	};
	
	Switch(GetCvar("NCaco_Spawner_Cvar"))
	{
//		Case -3: SetActorState(0,"AltSpawn3"); break;
		Case -2: SetActorState(0,"AltSpawn2"); break;
		Case -1: SetActorState(0,"AltSpawn1"); break;
	}
	SetActorState(0,CacoSpawnType[GetCvar("NCaco_Spawner_Cvar") - 1]);
	Delay(1);
}

script "BaronSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentBaron");

	SetResultValue(PercentValue);
}

script "BaronSpawner" (void)
{
	static str MonsterType[] =
	{
		"SpawnBaron","HoundChooser","SpawnBelp"
	};
	
	Switch(GetCvar("Hellhound_Spawner_Cvar"))
	{
		Case -2: SetActorState(0,"AltSpawn2"); break;
		Case -1: SetActorState(0,"AltSpawn1"); break;
	}
	SetActorState(0,MonsterType[GetCvar("Hellhound_Spawner_Cvar") - 1]);
	Delay(1);
}

script "HoundChooserACS" (void)
{
	Switch(GetCvar("HoundChooserCvar"))
	{
		Case -1: SetActorState(0,"D64MonsterOnly"); break;
		Case 0: SetActorState(0,"HoundDefault"); break;
		Case 1: SetActorState(0,"HoundGEC"); break;
	}
}

/*script "HoundChooserACS" (void)
{
	static str SkinType[] =
	{
		"HoundDefault","HoundGEC"
	};
	if(GetCvar("HoundChooserCvar") == -1) {SetActorState(0,"D64MonsterOnly");}
	SetActorState(0,SkinType[GetCvar("HoundChooserCvar") - 1]);
	Delay(1);
}*/

script "RevenantSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentRevenant");

	SetResultValue(PercentValue);
}

script "RevenantSpawner" (void)
{
	static str MonsterType[] =
	{
		"Revenant","SpawnPestilence"
	};
	if(GetCvar("Revenant_Spawner_Cvar") == -1) {SetActorState(0,"D64MonsterOnly");}	
	SetActorState(0,MonsterType[GetCvar("Revenant_Spawner_Cvar") - 1]);
	Delay(1);
}

script "HellKnightSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentHellKnight");

	SetResultValue(PercentValue);
}

script "HellKnightSpawner" (void)
{
	static str MonsterType[] =
	{
		"SpawnHellKnight","SpawnKnightmare"
	};
	SetActorState(0,MonsterType[GetCvar("KnightmareRandomCvar") - 1]);
	Delay(1);
}

script "MancubusSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentMancubus");

	SetResultValue(PercentValue);
}

script "MancubusSpawner" (void)
{
	static str MonsterType[] =
	{
		"SpawnFatso","SpawnBruiser"
	};
	SetActorState(0,MonsterType[GetCvar("BruiserRandom_Cvar") - 1]);
	Delay(1);
}

script "LostSoulSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentLostSoul");

	SetResultValue(PercentValue);
}

script "LostSoulSpawner" (void)
{
	static str MonsterType[] =
	{
		"SpawnLostSoul","SpawnStalker","SpawnForgottenOne"
	};

	Switch(GetCvar("StalkerRandom_Cvar"))
	{
//		Case -3: SetActorState(0,"AltSpawn3"); break;
		Case -2: SetActorState(0,"AltSpawn2"); break;
		Case -1: SetActorState(0,"AltSpawn1"); break;
	}
	SetActorState(0,MonsterType[GetCvar("StalkerRandom_Cvar") - 1]);
	Delay(1);
}

script "ArachnotronSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentArachnotron");

	SetResultValue(PercentValue);
}

script "ArachnotronSpawner" (void)
{
	static str MonsterType[] =
	{
		"SpawnArachnotron","SpawnNightCrawler","SpawnImpaler"
	};

	Switch(GetCvar("ArachnotronRandomCvar"))
	{
//		Case -3: SetActorState(0,"AltSpawn3"); break;
		Case -2: SetActorState(0,"AltSpawn2"); break;
		Case -1: SetActorState(0,"AltSpawn1"); break;
	}
	SetActorState(0,MonsterType[GetCvar("ArachnotronRandomCvar") - 1]);
	Delay(1);
}

script "PainElementalSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentPainElemental");

	SetResultValue(PercentValue);
}

Script "PainElementalSpawner" (void)
{
	static str MonsterType[] =
	{
		"SpawnPainElemental","SpawnNightmareElemental"
	};
	SetActorState(0,MonsterType[GetCvar("NightElementalRandomCvar") - 1]);
	Delay(1);
}

script "ArchvileSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentArchvile");

	SetResultValue(PercentValue);
}

Script "ArchvileSpawner" (void)
{
	static str MonsterType[] =
	{
		"SpawnArchvile","SpawnFleshWizard","SpawnHellstorm"
	};
	Switch(GetCvar("FleshWizardRandomCvar"))
	{
		Case -4: SetActorState(0,"D64MonsterOnly"); break;
//		Case -3: SetActorState(0,"AltSpawn3"); break;
		Case -2: SetActorState(0,"AltSpawn2"); break;
		Case -1: SetActorState(0,"AltSpawn1"); break;
	}
	SetActorState(0,MonsterType[GetCvar("FleshWizardRandomCvar") - 1]);
	Delay(1);
}

script "CyberdemonSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentCyberdemon");

	SetResultValue(PercentValue);
}

script "CyberdemonSpawner" (void)
{
	static str MonsterType[] =
	{
		"SpawnCyberdemon","SpawnAnnihilator",
		"SpawnInfernal"
	};
	Switch(GetCvar("Annihilator_Spawner_Cvar"))
	{
//		Case -3: SetActorState(0,"AltSpawn3"); break;
		Case -2: SetActorState(0,"AltSpawn2"); break;
		Case -1: SetActorState(0,"AltSpawn1"); break;
	}
	SetActorState(0,MonsterType[GetCvar("Annihilator_Spawner_Cvar") - 1]);
	Delay(1);
}

script "MastermindSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentMastermind");

	SetResultValue(PercentValue);
}

script "MastermindSpawner" (void)
{
	static str MonsterType[] =
	{
		"SpawnMastermind","SpawnMother",
		"SpawnEradicator"
	};
	Switch(GetCvar("Motherdemon_Spawner_Cvar"))
	{
		Case -4: SetActorState(0,"D64MonsterOnly"); break;
//		Case -3: SetActorState(0,"AltSpawn3"); break;
		Case -2: SetActorState(0,"AltSpawn2"); break;
		Case -1: SetActorState(0,"AltSpawn1"); break;
	}
	SetActorState(0,MonsterType[GetCvar("Motherdemon_Spawner_Cvar") - 1]);
	Delay(1);
}

Script "WadChecker" (void)
{
	static str WadChecking[] =
	{
		"Doom2","Doom64",
		"ScytheII","Bloodstain",
		"GoingDown","DoomZero"
	};
	SetActorState(0,WadChecking[GetCvar("BD64_WadCheck") - 1]);
	Delay(1);
}

script "HordeSpawnPercent" (void)
{
	int PercentValue = GetCvar("bd64_SpawnPercentHorde");

	SetResultValue(PercentValue);
}

script "HordeMultiplier" (void)		//husk zombie multiplier option
{
	Switch(GetCvar("TheHorde_Multiplier_Cvar"))
	{
		Default:
		Case -1: SetActorState(0,"Disabled"); break;
		Case 0: Break;
		Case 1: SetActorState(0,"Hordex1"); break;
		Case 2: SetActorState(0,"Hordex2"); break;
		Case 3: SetActorState(0,"Hordex3"); break;
		Case 4: SetActorState(0,"Hordex4"); break;
	}
	Delay(1);
}

script "LightAndFogChecker" (Void)
{
	Switch(GetCvar("LFog_Cvar"))
	{
		Default:
		Case 0: Break;
		Case 1: SetActorState(0,"NoLight"); SetActorState(0,"NoShaft"); break;
		Case 2: SetActorState(0,"NoLight"); break;
		Case 3: SetActorState(0,"NoShaft"); break;
	}
	Delay(1);
}

script "BerserkSwitchFistsACS" (void) Clientside
{
SetResultValue(GetUserCVar(PlayerNumber(),"BerserkSwitchFistsCvar"));
}

script "Flat_Decal_Check" (void) NET
{
SetResultValue(GetCVar("FloorDecal_Cvar"));
}

script "Flat_Decal_Remover" (void)
{
	if(GetCVar("FloorDecal_Cvar") == 0) { SetActorState(0,"Off"); }
}

script "SoulHandler" ENTER			//unmaker ammo set ThingID
{
Thing_ChangeTID(0,2337+PlayerNumber());
}

Script "TUnmakerChecker" (void)
{
	for(int i = 2337; i < 5000; i++)
	{
		if(CheckActorInventory(i,"unmakerTACTICAL") || CheckActorInventory(i,"64RuinerTACTICAL"))	//checks if you have unmaker or ruiner
		{
			SetResultValue(2);
			if(CheckActorInventory(i,"WpnPower1Icon") && CheckActorInventory(i,"WpnPower2Icon") && CheckActorInventory(i,"WpnPower3Icon"))	//checks if you have all 3 demon keys
			{
			SetResultValue(3);
			}
		}
	}
}

Script "AlternativeAmmoPickupSpritesACS" (void)
{
	if(GetCvar("AlphaPickupCvar") == 1 && GetCvar("AlternativeAmmoPickupSpritesCvar") == 2)
		{
			SetActorState(0,"AlternativeSprite"); SetActorState(0,"AltSpawn"); SetActorState(0,"SpawnAny");
		}
	else
	if(GetCvar("AlternativeAmmoPickupSpritesCvar") == 2)
		{
			SetActorState(0,"AlternativeSprite"); SetActorState(0,"AltSpawn");
		}
}

script "FootStepCheck" (void)	//footstep sound check for player decorate
{
	if(GetCvar("FootStepCheckCvar") == 1) { GiveInventory("FootstepDisabled",1); }
}

script "CensoredHealing_ACS" (void)
{
	static str CensorHeal[] =
	{
		"CensoredSpawn","BFGStyleSpawn"
	};
	SetActorState(0,CensorHeal[GetCVar("CensoredHealing_Cvar") - 1]);
	Delay(1);
}

/*
Script "VanillaChainsawACS" ENTER 	//option to set vanilla chainsaw
{
if (CheckInventory("64ChainsawTACTICAL") == 1 && GetCvar("VanillaChainsawCvar") == 1)
	{
		SetAmmoCapacity("SawGas",700);
		GiveInventory("64ChainsawTACTICAL_Classic",1);
		TakeInventory("64ChainsawTACTICAL",1);
		TakeInventory("SawGas",100);
		SetAmmoCapacity("SawGas",600);
	}
if (CheckInventory("64ChainsawTACTICAL_Classic") == 1 && GetCvar("VanillaChainsawCvar") == 0)
	{
		SetAmmoCapacity("SawGas",700);
		GiveInventory("64ChainsawTACTICAL",1);
		TakeInventory("64ChainsawTACTICAL_Classic",1);
		TakeInventory("SawGas",100);
		SetAmmoCapacity("SawGas",600);
	}
if (CheckInventory("64ChainsawMODERN") == 1 && GetCvar("VanillaChainsawCvar") == 1)
	{
		GiveInventory("64ChainsawMODERN_Classic",1);
		TakeInventory("64ChainsawMODERN",1);
	}
if (CheckInventory("64ChainsawMODERN_Classic") == 1 && GetCvar("VanillaChainsawCvar") == 0)
	{
		GiveInventory("64ChainsawMODERN",1);
		TakeInventory("64ChainsawMODERN_Classic",1);
	}
Delay(40);
Restart;
}
*/

script "AlphaPickupACS" (void)
{
	if(GetCvar("AlphaPickupCvar") == 1)
	{
		SetActorState(0,"AlphaSpawn");	//Items
		SetActorState(0,"StayAlpha");	//Barrel
	}
}

script "AlphaBarrelSee" (void)
{
	if(GetCvar("AlphaPickupCvar") == 1)
	{
		SetActorState(0,"AlphaSee");	//Barrel Death
	}
}

script "BonusRandomACS" (void)
{
	Switch(GetCvar("BonusRandomCvar"))
	{
		Case 0: Break;
		Default:
		Case 1: SetActorState(0,"SpawnHealthBonus"); SetActorState(0,"SpawnArmorBonus"); break;
		Case 2: SetActorState(0,"SpawnHellPotion"); break;	
	}
	Delay(1);
}

script "ThingRandomACS" (void)
{
	int ThingDeath = GetCVar("ThingRandomCvar");
	if(GetCvar("ThingRandomCvar") == 0)
	{
		SetActorState(0,"SpawnDeadMarine");
		SetActorState(0,"SpawnGibbedMarine");
		SetActorState(0,"SpawnGibbedMarineExtra");
		SetResultValue(ThingDeath);
	}
}

script "FlashlightCheck" (void)
{
	if(GetCvar("FlashlightStartCvar") == 0) { SetActorState(0,"SpawnInfrared"); }
}

script "PoltergeistEnablerACS" (void)
{
	if(GetCvar("PoltergeistCvar")== 0)
	{
		SetActorState(0,"SpawnBigTree");
		SetActorState(0,"SpawnEvilEye");
		SetActorState(0,"SpawnCandlestick");
		SetActorState(0,"SpawnCandelabra");
		SetActorState(0,"SpawnNormalBarrel");
		SetActorState(0,"SpawnNormalHangmen");
		SetActorState(0,"SpawnNormalStatue");
		SetActorState(0,"SpawnNormalFloatingSkull");
		SetActorState(0,"SpawnTechLamp");
	}
}

Script "HighCalibreCheck" (void)
{
	for(int i = 2337; i < 5000; i++)
	{
	if(CheckActorInventory(i,"IsTacticalClass")||CheckActorInventory(i,"IsModern")) {SetActorState(0,"RandomSpawn");}
	}
}

Script "ClassCheckWeaponDrop" (void)
{
	for(int i = 2337; i < 5000; i++)
	{
	if(CheckActorInventory(i,"IsTacticalClass")||CheckActorInventory(i,"IsModern")) {SetActorState(0,"DropTactical");}
	}
}

script "ClassicTorchACS" (void)
{
	if(GetCVar("ClassicTorchCvar") == 1) { SetActorState(0,"ClassicTorch"); }
}

script "LiquidSplashCvarACS" (void)
{
	if(GetCVar("LiquidSplashCvar") == 1) { SetActorState(0,"NoSplash"); }
}

script "CacoChooserACS" (void)
{
	if(GetCvar("CacoChooserCvar") == 1) { SetActorState(0,"ClassicCacos"); }
}

script "LowAmmoSFX" (void) clientside
{
	if(GetUserCVar(PlayerNumber(),"LowAmmoSFX") == 1) { PlaySound(0,"Weapon/LowAmmo",CHAN_AUTO,1.0,false,1.0,true); }
}

//Presets
script "OriginalCvars" (void) net
{
	SetCvar("AlternativeAmmoPickupSpritesCvar",1);
	SetCvar("VanillaChainsawCvar",1);
	SetCvar("ClassicChaingunCvar",1);
	SetCvar("ClassicRLCvar",1);
	SetCvar("VWeaponCvar",0);
	SetCvar("WeaponsWarmUpCvar",0);
	SetCvar("CensoredHealing_Cvar",0);
	SetCvar("AlphaPickupCvar",0);
	SetCvar("FlashlightStartCvar",0);
	SetCvar("NoReloadCvar",0);

	SetCvar("D64_SkipTitleMap",1);
	SetCvar("VMapCheckCvar",0);
	SetCvar("TCMapCheckCvar",0);
	SetCvar("AbsMapCheckCvar",0);

	SetCvar("Chaingun_Spawner_Cvar",1);
	SetCvar("GaussCannon_Spawner_Cvar",1);
	SetCvar("BFG_Spawner_Cvar",1);
	SetCvar("WpnPower_Spawner_Cvar",1);
	SetCvar("BonusRandomCvar",1);

	SetCvar("ZMarineRandom_Cvar",1);
	SetCvar("SSGZombieRandom_Cvar",1);
	SetCvar("ZombieChaingunRandom_Cvar",1);
	SetCvar("NImp_Spawner_Cvar",1);
	SetCvar("AcidDemonRandom_Cvar",1);
	SetCvar("NSpectre_Spawner_Cvar",1);
	SetCvar("NCaco_Spawner_Cvar",1);
	SetCvar("StalkerRandom_Cvar",1);
	SetCvar("ArachnotronRandomCvar",1);
	SetCvar("KnightmareRandomCvar",1);
	SetCvar("Revenant_Spawner_Cvar",-1);
	SetCvar("Hellhound_Spawner_Cvar",1);
	SetCvar("BruiserRandom_Cvar",1);
	SetCvar("NightElementalRandomCvar",1);
	SetCvar("FleshWizardRandomCvar",-1);
	SetCvar("Annihilator_Spawner_Cvar",1);
	SetCvar("Motherdemon_Spawner_Cvar",-1);

	SetCvar("CacoChooserCvar",0);
	SetCvar("HoundChooserCvar",1);

	SetCvar("HUDSwitchCvar",0);
	SetCvar("FootStepCheckCvar",1);
	SetCvar("LFog_Cvar",0);
	SetCvar("FloorDecal_Cvar",1);
	SetCvar("ClassicTorchCvar",0);
	SetCvar("LiquidSplashCvar",0);

	SetCvar("PoltergeistCvar",0);
	SetCvar("ThingRandomCvar",0);
	SetCvar("TheHorde_Multiplier_Cvar",-1);
	
	SetUserCvar(PlayerNumber(),"AlternativeRifleSkinCvar",FALSE);
	SetUserCvar(PlayerNumber(),"AlternativeLaserSkinCvar",FALSE);
	SetUserCvar(PlayerNumber(),"BerserkSwitchFistsCvar",1);
	SetUserCvar(PlayerNumber(),"LowAmmoSFX",1);
	ACS_NamedExecuteAlways("BD64Respawn",0);
	delay(1);
}

script "ClassicCvars" (void) net
{
	SetCvar("AlternativeAmmoPickupSpritesCvar",1);
	SetCvar("VanillaChainsawCvar",1);
	SetCvar("ClassicChaingunCvar",1);
	SetCvar("ClassicRLCvar",1);
	SetCvar("VWeaponCvar",1);
	SetCvar("WeaponsWarmUpCvar",0);
	SetCvar("CensoredHealing_Cvar",0);
	SetCvar("AlphaPickupCvar",0);
	SetCvar("FlashlightStartCvar",0);
	SetCvar("NoReloadCvar",1);

	SetCvar("D64_SkipTitleMap",0);
	SetCvar("VMapCheckCvar",1);
	SetCvar("TCMapCheckCvar",0);
	SetCvar("AbsMapCheckCvar",0);

	SetCvar("CacoChooserCvar",0);
	SetCvar("HoundChooserCvar",-1);

	SetCvar("Chaingun_Spawner_Cvar",1);
	SetCvar("GaussCannon_Spawner_Cvar",1);
	SetCvar("BFG_Spawner_Cvar",1);
	SetCvar("WpnPower_Spawner_Cvar",1);
	SetCvar("BonusRandomCvar",1);

	SetCvar("ZMarineRandom_Cvar",1);
	SetCvar("SSGZombieRandom_Cvar",1);
	SetCvar("ZombieChaingunRandom_Cvar",1);
	SetCvar("NImp_Spawner_Cvar",1);
	SetCvar("AcidDemonRandom_Cvar",1);
	SetCvar("NSpectre_Spawner_Cvar",1);
	SetCvar("NCaco_Spawner_Cvar",1);
	SetCvar("StalkerRandom_Cvar",1);
	SetCvar("ArachnotronRandomCvar",1);
	SetCvar("KnightmareRandomCvar",1);
	SetCvar("Revenant_Spawner_Cvar",-1);
	SetCvar("Hellhound_Spawner_Cvar",1);
	SetCvar("BruiserRandom_Cvar",1);
	SetCvar("NightElementalRandomCvar",1);
	SetCvar("FleshWizardRandomCvar",-4);
	SetCvar("Annihilator_Spawner_Cvar",1);
	SetCvar("Motherdemon_Spawner_Cvar",-4);

	SetCvar("TheHorde_Multiplier_Cvar",-1);

	SetCvar("HUDSwitchCvar",0);
	SetCvar("FootStepCheckCvar",1);
	SetCvar("LFog_Cvar",1);
	SetCvar("FloorDecal_Cvar",0);
	SetCvar("ClassicTorchCvar",1);
	SetCvar("LiquidSplashCvar",1);

	SetCvar("PoltergeistCvar",0);
	SetCvar("ThingRandomCvar",0);

	SetUserCvar(PlayerNumber(),"AlternativeRifleSkinCvar",FALSE);
	SetUserCvar(PlayerNumber(),"AlternativeLaserSkinCvar",FALSE);
	SetUserCvar(PlayerNumber(),"BerserkSwitchFistsCvar",1);
	SetUserCvar(PlayerNumber(),"LowAmmoSFX",0);
	ACS_NamedExecuteAlways("BD64Respawn",0);
	delay(1);
}

script "EnhancedCvars" (void) net
{
	SetCvar("AlternativeAmmoPickupSpritesCvar",2);
	SetCvar("VanillaChainsawCvar",0);
	SetCvar("ClassicChaingunCvar",0);
	SetCvar("ClassicRLCvar",0);
	SetCvar("VWeaponCvar",0);
	SetCvar("WeaponsWarmUpCvar",1);
	SetCvar("CensoredHealing_Cvar",0);
	SetCvar("AlphaPickupCvar",0);
	SetCvar("FlashlightStartCvar",0);
	SetCvar("NoReloadCvar",0);

	SetCvar("D64_SkipTitleMap",0);
	SetCvar("VMapCheckCvar",0);
	SetCvar("TCMapCheckCvar",1);
	SetCvar("AbsMapCheckCvar",1);

	SetCvar("Chaingun_Spawner_Cvar",1);
	SetCvar("GaussCannon_Spawner_Cvar",1);
	SetCvar("BFG_Spawner_Cvar",1);
	SetCvar("WpnPower_Spawner_Cvar",1);
	SetCvar("BonusRandomCvar",1);

	SetCvar("ZMarineRandom_Cvar",1);
	SetCvar("SSGZombieRandom_Cvar",1);
	SetCvar("ZombieChaingunRandom_Cvar",1);
	SetCvar("NImp_Spawner_Cvar",1);
	SetCvar("AcidDemonRandom_Cvar",1);
	SetCvar("NSpectre_Spawner_Cvar",1);
	SetCvar("NCaco_Spawner_Cvar",1);
	SetCvar("StalkerRandom_Cvar",1);
	SetCvar("ArachnotronRandomCvar",1);
	SetCvar("KnightmareRandomCvar",1);
	SetCvar("Revenant_Spawner_Cvar",1);
	SetCvar("Hellhound_Spawner_Cvar",1);
	SetCvar("BruiserRandom_Cvar",1);
	SetCvar("NightElementalRandomCvar",1);
	SetCvar("FleshWizardRandomCvar",1);
	SetCvar("Annihilator_Spawner_Cvar",1);
	SetCvar("Motherdemon_Spawner_Cvar",1);

	SetCvar("TheHorde_Multiplier_Cvar",-1);

	SetCvar("CacoChooserCvar",0);
	SetCvar("HoundChooserCvar",1);

	SetCvar("HUDSwitchCvar",1);
	SetCvar("FootStepCheckCvar",0);
	SetCvar("LFog_Cvar",0);
	SetCvar("ClassicTorchCvar",0);
	SetCvar("LiquidSplashCvar",0);
	SetCvar("FloorDecal_Cvar",1);

	SetCvar("PoltergeistCvar",1);
	SetCvar("ThingRandomCvar",1);
	SetUserCvar(PlayerNumber(),"AlternativeRifleSkinCvar",TRUE);
	SetUserCvar(PlayerNumber(),"AlternativeLaserSkinCvar",TRUE);
	SetUserCvar(PlayerNumber(),"BerserkSwitchFistsCvar",0);
	SetUserCvar(PlayerNumber(),"LowAmmoSFX",1);
	ACS_NamedExecuteAlways("BD64Respawn",0);
	delay(1);
}

script "RandomCvars" (void) net
{
	SetCvar("Chaingun_Spawner_Cvar",0);
	SetCvar("GaussCannon_Spawner_Cvar",0);
	SetCvar("BFG_Spawner_Cvar",0);
	SetCvar("WpnPower_Spawner_Cvar",0);
	SetCvar("BonusRandomCvar",0);
	SetCvar("ZMarineRandom_Cvar",0);
	SetCvar("SSGZombieRandom_Cvar",random(-2,0));
	SetCvar("ZombieChaingunRandom_Cvar",0);
	SetCvar("NImp_Spawner_Cvar",random(-2,0));
	SetCvar("AcidDemonRandom_Cvar",random(-2,0));
	SetCvar("NSpectre_Spawner_Cvar",random(-2,0));
	SetCvar("NCaco_Spawner_Cvar",random(-2,0));
	SetCvar("StalkerRandom_Cvar",random(-2,0));
	SetCvar("ArachnotronRandomCvar",random(-2,0));
	SetCvar("KnightmareRandomCvar",0);
	SetCvar("Revenant_Spawner_Cvar",0);
	SetCvar("Hellhound_Spawner_Cvar",random(-2,0));
	SetCvar("BruiserRandom_Cvar",0);
	SetCvar("NightElementalRandomCvar",0);
	SetCvar("FleshWizardRandomCvar",random(-2,0));
	SetCvar("Annihilator_Spawner_Cvar",random(-2,0));
	SetCvar("Motherdemon_Spawner_Cvar",random(-2,0));
	SetCvar("TheHorde_Multiplier_Cvar",0);
	SetCvar("PoltergeistCvar",1);
	SetCvar("ThingRandomCvar",1);
	ACS_NamedExecuteAlways("RandomMonstersPercent",0);
	ACS_NamedExecuteAlways("BD64Respawn",0);
	delay(1);
}

script "RandomMonstersPercent" (void) net
{
	SetCvar("bd64_SpawnPercentZombieman",random(1,10));
	SetCvar("bd64_SpawnPercentShotgunguy",random(1,10));
	SetCvar("bd64_SpawnPercentChaingunguy",random(1,10));
	SetCvar("bd64_SpawnPercentImp",random(1,10));
	SetCvar("bd64_SpawnPercentDemon",random(1,10));
	SetCvar("bd64_SpawnPercentSpectre",random(1,10));
	SetCvar("bd64_SpawnPercentCacodemon",random(1,10));
	SetCvar("bd64_SpawnPercentLostSoul",random(1,10));
	SetCvar("bd64_SpawnPercentPainElemental",random(1,10));
	SetCvar("bd64_SpawnPercentHellKnight",random(1,10));
	SetCvar("bd64_SpawnPercentBaron",random(1,10));
	SetCvar("bd64_SpawnPercentRevenant",random(1,10));
	SetCvar("bd64_SpawnPercentArachnotron",random(1,10));
	SetCvar("bd64_SpawnPercentMancubus",random(1,10));
	SetCvar("bd64_SpawnPercentCyberdemon",random(1,10));
	SetCvar("bd64_SpawnPercentMastermind",random(1,10));
	delay(1);
}