#library "BD64ACS"
#import "zcommon.bcs"
//#include "ACSFunc.acs"
#include "BCSFunc.acs"
//#include "BD64FlashlightACS.acs"
//#include "BD64ScreenFXACS.acs"
//#include "BD64Inputs.acs"
#include "BD64Spawners.acs"
#include "BD64Preset.acs"
#include "BD64MapDetect.acs"

/*script "BD64Respawn" Respawn NET
{
	SetInventory("HudSwitch",getusercvar(PlayerNumber(),"HUDSwitchCvar")); //Hud to Doom Style
	SetInventory("NoReloading",getcvar("NoReloadCvar")); //Reloading Mode
	SetInventory("VWeaponMode",getCvar("VWeaponCvar")); //Classic Weapons mode for Classical Mode
	SetInventory("AltLaserSkin",getuserCvar(PlayerNumber(),"AlternativeLaserSkinCvar")); //Alternative Lasergun skins

	//Classic Weapons Mode for Tactical and Modern Classes
	SetInventory("ClassicRLToken",getcvar("ClassicRLCvar"));
	SetInventory("ClassicChaingunToken",getcvar("ClassicChaingunCvar"));
	SetInventory("ClassicChainsawToken",getcvar("VanillaChainsawCvar"));

	Delay(1);
}*/

#libdefine SKILL_SURVIVAL 6
#libdefine SKILL_SURVIVAL_REALISM 7

Script "BD64Initilize" Enter
{
	if(GameType () == GAME_SINGLE_PLAYER)
	{
		sethudsize(160, 90, TRUE);
		setfont("BLASCR");
		HudMessageBold(s:"a"; HUDMSG_FADEOUT, 1, CR_BLACK, 0.1, 0.1, 0.1, 1.0);
	}

//	ACS_NamedExecuteAlways("BD64Respawn",0);
	CreateTranslation(2666,0:255=%[0,0,0]:[0.94,0.97,1.00]);//ALICE BLUE

/*	if(GetPlayerInfo(PlayerNumber(),PLAYERINFO_PLAYERCLASS) == 1 & 2)
	{

	}
	else
	{
		TakeInventory("Stamina",100);
	}

	if(GetCvar("WeaponsWarmUpCvar") == 0) //First Select Animation
	{
		TakeInventory("StartWeapon",1);
		TakeInventory("NeverSelectedPistol",1);
		TakeInventory("NeverSelectedRifle",1);
		TakeInventory("NeverSelectedShotgun",1);
		TakeInventory("NeverSelectedSSG",1);
		TakeInventory("NeverSelectedSMG",1);
		TakeInventory("NeverSelectedRL",1);
		TakeInventory("NeverSelectedPlasma",1);
		TakeInventory("NeverSelectedGauss",1);
	}

	//Survival Mode
	if(GameSkill() == SKILL_SURVIVAL || GameSkill() == SKILL_SURVIVAL_REALISM)
	if(PlayerClass(PlayerNumber()) == 0)
		GiveInventory("64PortableFirstAidKit",1);
	else
	GiveInventory("64PortableFirstAidKitTACTICAL",1);*/

	//Map Checker
	SetInventory("VmapCheck",GetCvar("VMapCheckCvar")); //Vanilla Final Outpost and The Absolution
	SetInventory("TCMapCheck",GetCvar("TCMapCheckCvar"));
}

script "IceDeathTranslate" (VOID) NET
{
Thing_SetTranslation(0,2666);
Delay(1);
}

/*Script "PlayerDeathScript" Death
{
	Delay(1);
	TakeInventory("ClassicChainsawToken",1);
	TakeInventory("ClassicRLToken",1);
}*/

Script "DM_SpawnACS" (VOID)
{
if	(GameType() == GAME_NET_DEATHMATCH)
	GiveInventory("IsDM",1);
}

script "SetBloodAmountACS" (void)
{
	if(GetCvar("isrunningzandronum") != 0)
	{
		switch(GetCvar("bd_bloodamount"))
		{
			Case 0: SetActorState(0,"LowBlood"); break;
			Case 1: SetActorState(0,"LowBlood"); break;
			Case 2: break;
			Case 3: SetActorState(0,"LotsOfBlood"); break;
			Case 4: SetActorState(0,"AbsurdBlood"); break;
			case 5: SetActorState(0,"AnimuGore"); break;
			break;
		}
	}
	else
	{
		switch(GetCvar("zdoombrutalblood"))
		{
			Case 0: SetActorState(0,"LowBlood"); break;
			Case 1: SetActorState(0,"LowBlood"); break;
			Case 2: break;
			Case 3: SetActorState(0,"LotsOfBlood"); break;
			Case 4: SetActorState(0,"AbsurdBlood"); break;
			case 5: SetActorState(0,"AnimuGore"); break;
			break;
		}
	}
}

Script "LowBloodCheckerACS" (VOID)
{
if	(GameType () == GAME_NET_DEATHMATCH || GetCvar("bd_lowgraphicsmode") != 0 | GetCvar("zdoombrutaljanitor") != 0 )
{ GiveInventory("LowGraphicsMode",1); }
}

script "Zandro_Check" OPEN
{
if(IsZandronum())
	{
	ConsoleCommand("compat_clientssendfullbuttoninfo 1");
	}
}

/*script "QZanTacticalCheck" Enter
{
Delay(3);
if (GetCvar("IsRunningQZan") == 1)
	{
	if(CheckInventory("IsTacticalClass") == 1)
		{
		ConsoleCommand("cl_run FALSE");
		}
	}
}*/

script "LightAndFogChecker" (Void)
{
	Switch(GetCvar("LFog_Cvar"))
	{
		Default:
		Case 0: Break;
		Case 1: SetActorState(0,"NoLight"); SetActorState(0,"NoShaft"); break;
		Case 2: SetActorState(0,"NoLight"); break;
		Case 3: SetActorState(0,"NoShaft"); break;
	}
	Delay(1);
}

/*script "BerserkSwitchFistsACS" (void) Clientside
{
	if(GetUserCVar(PlayerNumber(),"BerserkSwitchFistsCvar") == true)	
	{
		If(CheckInventory("IsTacticalClass") || CheckInventory("IsModern"))
		{
			SetWeapon("64FistTactical");
		}	
		else
		{
			SetWeapon("64Fist");
		}
	}
}*/

script "Flat_Decal_Check" (void) NET
{
SetResultValue(GetCVar("FloorDecal_Cvar"));
}

script "Flat_Decal_Remover" (void)
{
	if(GetCVar("FloorDecal_Cvar") == 0) { SetActorState(0,"Off"); }
}

/*script "SoulHandler" ENTER
{
Thing_ChangeTID(0,6666+PlayerNumber());//gives player a TID to allow control of item spawns
}

Script "TUnmakerChecker" (void)
{
	for(int i = 6666; i < 6766; i++)
	{
		if(CheckActorInventory(i,"unmakerTACTICAL") || CheckActorInventory(i,"64RuinerTACTICAL"))	//checks if you have unmaker or ruiner
		{
			SetResultValue(2);
			if(CheckActorInventory(i,"WpnPower1Icon") && CheckActorInventory(i,"WpnPower2Icon") && CheckActorInventory(i,"WpnPower3Icon"))	//checks if you have all 3 demon keys
			{
			SetResultValue(3);
			}
		}
	}
}

Script "AlternativeAmmoPickupSpritesACS" (void)
{
	if(GetCvar("AlphaPickupCvar") == 1 && GetCvar("AlternativeAmmoPickupSpritesCvar") == 2)
		{
			SetActorState(0,"AlternativeSprite"); SetActorState(0,"AltSpawn"); SetActorState(0,"SpawnAny");
		}
	else
	if(GetCvar("AlternativeAmmoPickupSpritesCvar") == 2)
		{
			SetActorState(0,"AlternativeSprite"); SetActorState(0,"AltSpawn");
		}
}*/

/*script "FootStepCheck" (void)	//footstep sound check for player decorate
{
	if(GetCvar("FootStepCheckCvar") == 1) { GiveInventory("FootstepDisabled",1); }
}*/

/*script "CensoredHealing_ACS" (void)
{
	static str CensorHeal[] =
	{
		"CensoredSpawn","BFGStyleSpawn"
	};
	SetActorState(0,CensorHeal[GetCVar("CensoredHealing_Cvar") - 1]);
	Delay(1);
}*/

/*script "WeaponPickupChecker" (int Weapon)
{
	static str WeaponPickups[50] =
	{ //Regular Weapons
		"64Chainsaw", "64Pistol","64SMG","64Shotgun","64SuperShotgun","64Chaingun","64Rifle","64RocketLauncher","64PlasmaRifle","64GaussCannon","64BFG9000","Unmaker","Lasergun","64MP40",
		//Xtra Weapons
		"64FireAxe","64Revolver","64AssaultShotgun","64QuadShotgun","64HexaShotgun","64LMG","64SniperRifle","64NadeLauncher","64Nailgun","64BFG10K","64Ruiner","64Flamethrower","64HeatseekerLauncher","64NuclearMissileLauncher"
		};


	If(CheckInventory("IsTacticalClass") || CheckInventory("IsModern"))
	{
		str TacticalWeaponPickup = StrParam(s:WeaponPickups[Weapon-1],s:"Tactical");
		
		GiveInventory(TacticalWeaponPickup,1);
		SetWeapon(TacticalWeaponPickup);
	}	
	else
	{
		GiveInventory(WeaponPickups[Weapon-1],1);
		SetWeapon(WeaponPickups[Weapon-1]);
	}
}*/

script "AlphaPickupACS" (void)
{
	if(GetCvar("AlphaPickupCvar") == 1)
	{
		SetActorState(0,"AlphaSpawn");	//Items
		SetActorState(0,"StayAlpha");	//Barrel
	}
}

script "AlphaBarrelSee" (void)
{
	if(GetCvar("AlphaPickupCvar") == 1)
	{
		SetActorState(0,"AlphaSee");	//Barrel Death
	}
}

/*script "BonusRandomACS" (void)
{
	Switch(GetCvar("BonusRandomCvar"))
	{
		Case 0: Break;
		Default:
		Case 1: SetActorState(0,"SpawnHealthBonus"); SetActorState(0,"SpawnArmorBonus"); break;
		Case 2: SetActorState(0,"SpawnHellPotion"); break;	
	}
	Delay(1);
}*/

script "ThingRandomACS" (void)
{
	int ThingDeath = GetCVar("ThingRandomCvar");
	if(GetCvar("ThingRandomCvar") == 0)
	{
		SetActorState(0,"SpawnDeadMarine");
		SetActorState(0,"SpawnGibbedMarine");
		SetActorState(0,"SpawnGibbedMarineExtra");
		SetResultValue(ThingDeath);
	}
}

/*script "FlashlightCheck" (void)
{
	if(GetCvar("FlashlightStartCvar") == 0) { SetActorState(0,"SpawnInfrared"); }
}*/

script "PoltergeistEnablerACS" (void)
{
	if(GetCvar("PoltergeistCvar")== 0)
	{
		SetActorState(0,"SpawnBigTree");
		SetActorState(0,"SpawnEvilEye");
		SetActorState(0,"SpawnCandlestick");
		SetActorState(0,"SpawnCandelabra");
		SetActorState(0,"SpawnNormalBarrel");
		SetActorState(0,"SpawnNormalHangmen");
		SetActorState(0,"SpawnNormalStatue");
		SetActorState(0,"SpawnNormalFloatingSkull");
		SetActorState(0,"SpawnTechLamp");
	}
}

/*Script "HighCalibreCheck" (void)
{
	for(int i = 6666; i < 6766; i++)
	{
	if(CheckActorInventory(i,"IsTacticalClass")||CheckActorInventory(i,"IsModern")) {SetActorState(0,"RandomSpawn");}
	}
}*/

script "ClassicTorchACS" (void)
{
	if(GetCVar("ClassicTorchCvar") == 1) { SetActorState(0,"ClassicTorch"); }
}

script "LiquidSplashCvarACS" (void)
{
	if(GetCVar("LiquidSplashCvar") == 1) { SetActorState(0,"NoSplash"); }
}

script "CacoChooserACS" (void)
{
	if(GetCvar("CacoChooserCvar") == 1) { SetActorState(0,"ClassicCacos"); }
}

/*script "LowAmmoSFX" (void) clientside
{
	if(GetUserCVar(PlayerNumber(),"LowAmmoSFX") == 1) { PlaySound(0,"Weapon/LowAmmo",CHAN_AUTO,1.0,false,1.0,true); }
}*/

script "RandomCvars" (void) net
{
//	SetCvar("Chaingun_Spawner_Cvar",0);
//	SetCvar("GaussCannon_Spawner_Cvar",0);
//	SetCvar("BFG_Spawner_Cvar",0);
//	SetCvar("WpnPower_Spawner_Cvar",0);
//	SetCvar("BonusRandomCvar",0);
	SetCvar("ZMarineRandom_Cvar",0);
	SetCvar("SSGZombieRandom_Cvar",random(-2,0));
	SetCvar("ZombieChaingunRandom_Cvar",0);
	SetCvar("NImp_Spawner_Cvar",random(-2,0));
	SetCvar("AcidDemonRandom_Cvar",random(-2,0));
	SetCvar("NSpectre_Spawner_Cvar",random(-2,0));
	SetCvar("NCaco_Spawner_Cvar",random(-2,0));
	SetCvar("StalkerRandom_Cvar",random(-2,0));
	SetCvar("ArachnotronRandomCvar",random(-2,0));
	SetCvar("KnightmareRandomCvar",0);
	SetCvar("Revenant_Spawner_Cvar",0);
	SetCvar("Hellhound_Spawner_Cvar",random(-2,0));
	SetCvar("BruiserRandom_Cvar",0);
	SetCvar("NightElementalRandomCvar",0);
	SetCvar("FleshWizardRandomCvar",random(-2,0));
	SetCvar("Annihilator_Spawner_Cvar",random(-2,0));
	SetCvar("Motherdemon_Spawner_Cvar",random(-2,0));
	SetCvar("TheHorde_Multiplier_Cvar",0);
	SetCvar("PoltergeistCvar",1);
	SetCvar("ThingRandomCvar",1);
	ACS_NamedExecuteAlways("RandomMonstersPercent",0);
//	ACS_NamedExecuteAlways("BD64Respawn",0);
	delay(1);
}

script "RandomMonstersPercent" (void) net
{
	SetCvar("bd64_SpawnPercentZombieman",random(1,10));
	SetCvar("bd64_SpawnPercentShotgunguy",random(1,10));
	SetCvar("bd64_SpawnPercentChaingunguy",random(1,10));
	SetCvar("bd64_SpawnPercentImp",random(1,10));
	SetCvar("bd64_SpawnPercentDemon",random(1,10));
	SetCvar("bd64_SpawnPercentSpectre",random(1,10));
	SetCvar("bd64_SpawnPercentCacodemon",random(1,10));
	SetCvar("bd64_SpawnPercentLostSoul",random(1,10));
	SetCvar("bd64_SpawnPercentPainElemental",random(1,10));
	SetCvar("bd64_SpawnPercentHellKnight",random(1,10));
	SetCvar("bd64_SpawnPercentBaron",random(1,10));
	SetCvar("bd64_SpawnPercentRevenant",random(1,10));
	SetCvar("bd64_SpawnPercentArachnotron",random(1,10));
	SetCvar("bd64_SpawnPercentMancubus",random(1,10));
	SetCvar("bd64_SpawnPercentCyberdemon",random(1,10));
	SetCvar("bd64_SpawnPercentMastermind",random(1,10));
	delay(1);
}